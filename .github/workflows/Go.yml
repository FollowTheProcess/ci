name: Go CI

on:
  workflow_call:
    inputs:
      test-summary:
        description: Use https://github.com/mfridman/tparse to summarise test output to `GITHUB_STEP_SUMMARY`
        type: boolean
        required: false
        default: true

      test-flags:
        description: >
          Additional flags to pass to `go test`. `-race`, `-cover` and `-covermode` are all already set. If `test-summary` is true,
          then the `-json` flag will be automatically set as well. But here you may pass `-v` for example or any other test flag.
        type: string
        required: false
        default: ""

      matrix-os:
        description: List of operating systems to test on. Must be in pseudo-JSON array syntax e.g. `'["ubuntu-latest", "windows-latest"]'` etc.
        type: string
        required: false
        default: '["ubuntu-latest", "macos-latest", "windows-latest"]'

      fuzz:
        description: >
          Automatically generate a matrix of fuzz tests and run them in parallel for a configurable `fuzz-time`. If there are no
          fuzz tests in the project, this is a no op so is a safe option to leave on.
        type: boolean
        required: false
        default: true

      fuzz-time:
        description: Time (in Go `time.Duration` format) to run each fuzz test for e.g 1m30s
        type: string
        required: false
        default: 1m

      codecov:
        description: Send coverage data to CodeCov.io. Requires that tokenless uploading has been configured and is enabled.
        type: boolean
        required: false
        default: true

      linter:
        description: The tool to use to lint Go source. Either `staticcheck` or `golangci-lint`.
        type: string
        required: false
        default: golangci-lint

      golangci-lint-version:
        description: The version of golangci-lint to use, if selected with `linter`
        type: string
        required: false
        default: latest

      staticcheck-version:
        description: The version of staticcheck to use, if selected with `linter`
        type: string
        required: false
        default: latest

      timeout-minutes:
        description: Maximum number of minutes to let each job execute for, will be cancelled when timeout is met.
        type: number
        required: false
        default: 15

      working-directory:
        description: The working directory to be in for the entire workflow
        type: string
        required: false
        default: "."

      env:
        description: JSON string of an object containing environment variables to set for the whole workflow
        type: string
        required: false
        default: "{}"

permissions:
  contents: read

env: ${{ fromJSON(inputs.env) }}

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    timeout-minutes: ${{ inputs.timeout-minutes }}
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
        shell: bash
    strategy:
      matrix:
        os: ${{ fromJSON(inputs.matrix-os) }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Install tparse
        if: inputs.test-summary == true
        run: go install github.com/mfridman/tparse@latest

      - name: Run Tests
        if: inputs.test-summary == true
        run: |
          go test -race -json -cover -covermode=atomic ${{ inputs.test-flags }} ./... | tparse -trimpath -all -format markdown -follow-output ./raw.txt >> $GITHUB_STEP_SUMMARY
          cat ./raw.txt

      - name: Run Tests
        if: inputs.test-summary != true
        run: go test -race -cover -covermode=atomic ${{ inputs.test-flags }} ./...

  cov:
    name: CodeCov
    runs-on: ubuntu-latest
    if: inputs.codecov == true
    timeout-minutes: ${{ inputs.timeout-minutes }}
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
        shell: bash

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run Tests
        run: go test -race -cover -covermode=atomic -coverprofile=./coverage.out ./...

      - name: Coverage
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.out

  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.timeout-minutes }}
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
        shell: bash

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run Linting (golangci-lint)
        if: inputs.linter == 'golanci-lint'
        uses: golangci/golangci-lint-action@v8
        with:
          version: ${{ inputs.golangci-lint-version }}

      - name: Run Linting (staticcheck)
        if: inputs.linter == 'staticcheck'
        uses: dominikh/staticcheck-action@v1
        with:
          version: ${{ inputs.staticcheck-version }}
          install-go: false

  typos:
    name: Typos
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.timeout-minutes }}
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
        shell: bash

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Check for Typos
        uses: crate-ci/typos@v1

  vulncheck:
    name: Vulncheck
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.timeout-minutes }}
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
        shell: bash

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
        
      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: Run govulncheck
        run: govulncheck ./...

  fuzz-matrix:
    name: Check for Fuzz Tests
    runs-on: ubuntu-latest
    if: inputs.fuzz == true
    timeout-minutes: ${{ inputs.timeout-minutes }}
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
        shell: bash

    outputs:
      json: ${{ steps.fuzz-matrix.outputs.json }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Fetch Fuzz Script
        run: |
          curl -L \
            -H "Accept: application/vnd.github.raw" \
            -H "Authorization: Bearer ${{ github.token }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -O https://raw.githubusercontent.com/FollowTheProcess/ci/refs/heads/main/fuzz.py

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Fuzz Matrix
        id: fuzz-matrix
        run: echo "json=$(python fuzz.py)" >> $GITHUB_OUTPUT

      - name: Log Empty Fuzz Outputs
        if: steps.fuzz-matrix.outputs.json == '[]'
        run: echo ::notice::Nothing to fuzz ðŸ˜´

  fuzz:
    name: Fuzz
    runs-on: ubuntu-latest
    if: ${{ inputs.fuzz == true && needs.fuzz-matrix.outputs.json != '[]' }}
    timeout-minutes: ${{ inputs.timeout-minutes }}
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
        shell: bash

    needs:
      - fuzz-matrix

    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.fuzz-matrix.outputs.json) }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run Fuzz Tests
        run: go test ${{ matrix.pkg }} -run=^${{ matrix.name }}$ -fuzz=^${{ matrix.name }}$ -fuzztime ${{ inputs.fuzz-time }}
